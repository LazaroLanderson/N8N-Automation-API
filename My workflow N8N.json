{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/buscar-produtos",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        0,
        0
      ],
      "id": "820ffce5-b74f-4e2a-9af1-e72f5da88a91",
      "name": "Webhook",
      "webhookId": "2fe6120c-2503-4873-bf0e-d5ed67fbd141"
    },
    {
      "parameters": {
        "jsCode": "// Obter termo de pesquisa do webhook\nconst termoPesquisa = $('Webhook').first().json.body.termo || '';\n\n// Obter lista de produtos do nó atual (Move Binary Data)\nconst produtos = $input.first().json.data || [];\n\n// Função para normalizar texto (remover acentos e converter para minúsculo)\nfunction normalizeText(text) {\n  if (!text) return '';\n  return text\n    .toLowerCase()\n    .normalize('NFD')\n    .replace(/[\\u0300-\\u036f]/g, '');\n}\n\n// Se não há termo de pesquisa, retornar vazio\nif (!termoPesquisa) {\n  return [{\n    possiveis_produtos: {\n      termo_pesquisado: '',\n      qtde: 0,\n      produtos_encontrados: []\n    }\n  }];\n}\n\n// Buscar produtos que contenham o termo na descrição\nconst termoNormalizado = normalizeText(termoPesquisa);\nconst produtosEncontrados = produtos.filter(produto => {\n  if (!produto.descricao) return false;\n  const descricaoNormalizada = normalizeText(produto.descricao);\n  return descricaoNormalizada.includes(termoNormalizado);\n});\n\n// Formatar resposta\nconst resposta = {\n  possiveis_produtos: {\n    termo_pesquisado: termoPesquisa,\n    qtde: produtosEncontrados.length,\n    produtos_encontrados: produtosEncontrados.map(produto => ({\n      codigo: produto.codigo,\n      descricao: produto.descricao\n    }))\n  }\n};\n\nreturn [resposta];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        656,
        -96
      ],
      "id": "0e82cecc-24bf-4343-b4aa-1ededd076022",
      "name": "Code"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        864,
        128
      ],
      "id": "5509ddc9-54cd-4904-8eb1-22ccf16e2cc6",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "fileSelector": "/data/exemplo-de-produtos.json",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        208,
        -176
      ],
      "id": "6dd69f89-345b-4edb-88e0-c8c038cc6497",
      "name": "Read/Write Files from Disk"
    },
    {
      "parameters": {
        "operation": "fromJson",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        384,
        112
      ],
      "id": "274b22b2-2e46-4ced-abba-a1961b1837e6",
      "name": "Extract from File"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "3967a5df-6545-4b8d-8c0c-aef5f33617a9",
  "meta": {
    "instanceId": "e572944b0093c83f261c35254365fd0b0f4bfb2c6716c384986c9c59e83b19c8"
  },
  "id": "GysIQmU7uzuxFP9L",
  "tags": []
}